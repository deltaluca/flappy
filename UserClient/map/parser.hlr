%token MOVE CLOSE LINE VERT HORZ CUBIC SMOOTH QUAD SMOOTHQ
%token NUM

%{
	import map.HLex;
	import scx.Match;

	class PTU {
		static public function index(t:PathToken) return Type.enumIndex(t)
	}

	typedef VerbosePath = Array<VerbosePathCommand>;
	enum VerbosePathCommand {
		vpMoveTo(rel:Bool, x:Float,y:Float);
		vpLineTo(rel:Bool, x:Float,y:Float);
		vpHLineTo(rel:Bool, x:Float);
		vpVLineTo(rel:Bool, y:Float);
		vpCurveTo(rel:Bool, x:Float,y:Float,cx:Float,cy:Float);
		vpCubicTo(rel:Bool, x:Float,y:Float,cx1:Float,cy1:Float,cx2:Float,cy2:Float);
		vpSmoothQTo(rel:Bool, x:Float,y:Float);
		vpSmoothTo(rel:Bool, x:Float,y:Float, cx2:Float,cy2:Float);
		vpClose;
	}
%} 

%entry pathdata

%pathdata %{ VerbosePath %}
	: movetodrawto
	| pathdata movetodrawto %{ %0.concat(%1); %}
;

%movetodrawto %{ VerbosePath %}
	: moveto drawtocommands %{ %0.concat(%1); %}
;

%drawtocommands %{ VerbosePath %}
	: drawtocommand
	| drawtocommands drawtocommand %{ %0.concat(%1); %}
;

%drawtocommand %{ VerbosePath %}
	: CLOSE %{ [vpClose]; %}
	| lineto
	| hlineto
	| vlineto
	| curveto
	| smoothto
	| quadto
	| smoothqto
;

%moveto %{ VerbosePath %}
	: move coords %{
		var fst = %1.shift();
		var ret = [vpMoveTo(%0,fst.x,fst.y)];
		for(c in %1)
			ret.push(vpLineTo(%0,c.x,c.y));
		ret;
	%}
;

%lineto %{ VerbosePath %}
	: line coords %{
		var ret = [];
		for(c in %1) ret.push(vpLineTo(%0,c.x,c.y));
		ret;
	%}	
;

%hlineto %{ VerbosePath %}
	: hline values %{
		var ret = [];
		for(v in %1) ret.push(vpHLineTo(%0,v));
		ret;
	%}
;
%vlineto %{ VerbosePath %}
	: vline values %{
		var ret = [];
		for(v in %1) ret.push(vpVLineTo(%0,v));
		ret;
	%}
;

%curveto %{ VerbosePath %}
	: curve coords3 %{
		var ret = [];
		for(c in %1) ret.push(vpCubicTo(%0, c.x,c.y,c.cx1,c.cy1,c.cx2,c.cy2));
		ret;
	%}
;

%smoothto %{ VerbosePath %}
	: smooth coords2 %{
		var ret = [];
		for(c in %1) ret.push(vpSmoothTo(%0, c.x,c.y,c.cx,c.cy));
		ret;
	%}
;

%quadto %{ VerbosePath %}
	: quad coords2 %{
		var ret = [];
		for(c in %1) ret.push(vpCurveTo(%0, c.x,c.y,c.cx,c.cy));
		ret;
	%}
; 

%smoothqto %{ VerbosePath %}
	: smoothq coords %{
		var ret = [];
		for(c in %1) ret.push(vpSmoothQTo(%0, c.x,c.y));
		ret;
	%}
;

%coords %{ Array<{x:Float,y:Float}> %}
	: num num %{ [{x:%0,y:%1}]; %}
	| coords num num %{ %0.push({x:%1,y:%2}); %0; %}
;
%coords2 %{ Array<{x:Float,y:Float,cx:Float,cy:Float}> %}
	: num num num num %{ [{x:%0,y:%1,cx:%2,cy:%3}]; %}
	| coords2 num num num num %{ %0.push({x:%1,y:%2,cx:%3,cy:%4}); %0; %}
;
%coords3 %{ Array<{x:Float,y:Float,cx1:Float,cy1:Float,cx2:Float,cy2:Float}> %}
	: num num num num num num %{ [{x:%0,y:%1,cx1:%2,cy1:%3,cx2:%4,cy2:%5}]; %}
	| coords3 num num num num num num %{ %0.push({x:%1,y:%2,cx1:%3,cy1:%4,cx2:%5,cy2:%6}); %0; %}
;
%values %{ Array<Float> %}
	: num %{ [%0]; %}
	| values num %{ %0.push(%1); %0; %}
;

//----------------------------

%num %{ Float %} : NUM %{ Match.match(%0,ptNum(x)=x); %} ;

%move %{ Bool %} : MOVE %{ Match.match(%0,ptMove(x)=x); %} ;
%line %{ Bool %} : LINE %{ Match.match(%0,ptLine(x)=x); %} ;
%hline %{ Bool %} : HORZ %{ Match.match(%0,ptHorz(x)=x); %} ;
%vline %{ Bool %} : VERT %{ Match.match(%0,ptVert(x)=x); %} ;
%curve %{ Bool %} : CUBIC %{ Match.match(%0,ptCubic(x)=x); %} ;
%smooth %{ Bool %} : SMOOTH %{ Match.match(%0,ptSmooth(x)=x); %} ;
%quad %{ Bool %} : QUAD %{ Match.match(%0,ptQuad(x)=x); %} ;
%smoothq %{ Bool %} : SMOOTHQ %{ Match.match(%0,ptSmoothQ(x)=x); %} ;
