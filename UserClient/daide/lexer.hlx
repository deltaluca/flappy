//ignore whitespace
NULL -1 : ~/[\n\r \t]/~

%{
	import daide.Tokens;
	class HLexLog {
		public static var logger:String->Void = null;
		public static function log(x:String) {
			logger(x);
		}

		public static function province(x:String) {
			var xs = ((~/[\n\r \t]+/).replace(x," ")).split(" ");
			var val = Std.parseInt(xs[1]);
			if(xs.length==2) return { val:val, sc:false };
			else             return { val:val, sc:xs[2]=="true" };
		}
	}
%}

2 : ~/0+/~ := %{ tZero; %}
1 : ~/[+\-]?(([0-9]+)|(0x[0-9a-fA-F]+))/~ := %{ tNonZero(Std.parseInt(%)); %}
~/("([^\\"\r\n]|\\.)*")|('([^\\'\r\n]|\\.)*')/~ := %{ tText(%.substr(1,%.length-2)); %}

~/\(/~ := %{ tLeftParen;  %}
~/\)/~ := %{ tRightParen; %}

// power INTEGER
~/power[\n\r \t]+[+/-]?(([0-9]+)|(0x[0-9a-fA-F]+))/~ := %{
	var xs = ((~/[\n\r \t]+/).replace(%," ")).split(" ");
	tPower(Std.parseInt(xs[1]));
%}

// type INTEGER [true|false]
~/inland[\n\r \t]+[+\-]?(([0-9]+)|(0x[0-9a-fA-F]+))([\n\r \t]+((true)|(false)))?/~ := %{
	var pro = HLexLog.province(%);
	tProvince(proInland(pro.val,pro.sc));
%}
~/sea[\n\r \t]+[+\-]?(([0-9]+)|(0x[0-9a-fA-F]+))([\n\r \t]+((true)|(false)))?/~ := %{
	var pro = HLexLog.province(%);
	tProvince(proSea(pro.val,pro.sc));
%}
~/coastal[\n\r \t]+[+\-]?(([0-9]+)|(0x[0-9a-fA-F]+))([\n\r \t]+((true)|(false)))?/~ := %{
	var pro = HLexLog.province(%);
	tProvince(proCoastal(pro.val,pro.sc));
%}
~/bicoastal[\n\r \t]+[+\-]?(([0-9]+)|(0x[0-9a-fA-F]+))([\n\r \t]+((true)|(false)))?/~ := %{
	var pro = HLexLog.province(%);
	tProvince(proBiCoastal(pro.val,pro.sc));
%}

~/AMY/~ := %{ tUnitType(utArmy);  %} 
~/FLT/~ := %{ tUnitType(utFleet); %} 

~/CTO/~ := %{ tOrder(oMoveByConvoy); %}
~/CVY/~ := %{ tOrder(oConvoy); %}
~/HLD/~ := %{ tOrder(oHold); %}
~/MTO/~ := %{ tOrder(oMove); %}
~/SUP/~ := %{ tOrder(oSupport); %}
~/VIA/~ := %{ tOrder(oVia); %}
~/DSB/~ := %{ tOrder(oDisband); %}
~/RTO/~ := %{ tOrder(oRetreat); %}
~/BLD/~ := %{ tOrder(oBuild); %}
~/REM/~ := %{ tOrder(oRemove); %}
~/WVE/~ := %{ tOrder(oWaive); %}

~/MBV/~ := %{ tOrderNote(onOkay); %}
~/BPR/~ := %{ tOrderNote(onBPR); %}
~/CST/~ := %{ tOrderNote(onNoCoastSpecified); %}
~/ESC/~ := %{ tOrderNote(onNotEmptySupply); %}
~/FAR/~ := %{ tOrderNote(onNotAdjacent); %}
~/HSC/~ := %{ tOrderNote(onNotHomeSupply); %}
~/NAS/~ := %{ tOrderNote(onNotAtSea); %}
~/NMB/~ := %{ tOrderNote(onNoMoreBuilds); %}
~/NMR/~ := %{ tOrderNote(onNoMoreRemovals); %}
~/NRN/~ := %{ tOrderNote(onNoRetreatNeeded); %}
~/NRS/~ := %{ tOrderNote(onNotRightSeason); %}
~/NSA/~ := %{ tOrderNote(onNoSuchArmy); %}
~/NSC/~ := %{ tOrderNote(onNotSupply); %}
~/NSF/~ := %{ tOrderNote(onNoSuchFleet); %}
~/NSP/~ := %{ tOrderNote(onNoSuchProvince); %}
~/NSU/~ := %{ tOrderNote(onNoSuchUnit); %}
~/NVR/~ := %{ tOrderNote(onNotValidRetreat); %}
~/NYU/~ := %{ tOrderNote(onNotYourUnit); %}
~/YSC/~ := %{ tOrderNote(onNotYourSupply); %}

~/SUC/~ := %{ tResult(rSuccess); %}
~/BNC/~ := %{ tResult(rMoveBounced); %}
~/CUT/~ := %{ tResult(rSupportCut); %}
~/DSR/~ := %{ tResult(rConvoyDisrupted); %}
~/FLD/~ := %{ tResult(rFLD); %}
~/NSO/~ := %{ tResult(rNoSuchOrder); %}
~/RET/~ := %{ tResult(rDislodged); %}

~/NCS/~ := %{ tCoast(cNorth); %}
~/NEC/~ := %{ tCoast(cNorthEast); %}
~/ECS/~ := %{ tCoast(cEast); %}
~/SEC/~ := %{ tCoast(cSouthEast); %}
~/SCS/~ := %{ tCoast(cSouth); %}
~/SWC/~ := %{ tCoast(cSouthWest); %}
~/WCS/~ := %{ tCoast(cWest); %}
~/NWC/~ := %{ tCoast(cNorthWest); %}

~/SPR/~ := %{ tPhase(pSpring); %}
~/SUM/~ := %{ tPhase(pSummer); %}
~/FAL/~ := %{ tPhase(pFall); %}
~/AUT/~ := %{ tPhase(pAutumn); %}
~/WIN/~ := %{ tPhase(pWinter); %} 

~/CCD/~ := %{ tCommand(coPowerInCivilDisorder); %}
~/DRW/~ := %{ tCommand(coDraw); %}
~/FRM/~ := %{ tCommand(coMessageFrom); %}
~/GOF/~ := %{ tCommand(coGoFlag); %}
~/HLO/~ := %{ tCommand(coHello); %}
~/HST/~ := %{ tCommand(coHistory); %}
~/HUH/~ := %{ tCommand(coHuh); %}
~/IAM/~ := %{ tCommand(coIAm); %}
~/LOD/~ := %{ tCommand(coLoadGame); %}
~/MAP/~ := %{ tCommand(coMap); %}
~/MDF/~ := %{ tCommand(coMapDefinition); %}
~/MIS/~ := %{ tCommand(coMissingOrders); %}
~/NME/~ := %{ tCommand(coName); %}
~/NOT/~ := %{ tCommand(coNOT); %}
~/NOW/~ := %{ tCommand(coCurrentPosition); %}
~/OBS/~ := %{ tCommand(coObserver); %}
~/OFF/~ := %{ tCommand(coTurnOff); %}
~/ORD/~ := %{ tCommand(coOrderResult); %}
~/OUT/~ := %{ tCommand(coPowerEliminated); %}
~/PRN/~ := %{ tCommand(coParenthesisError); %}
~/REJ/~ := %{ tCommand(coReject); %}
~/SCO/~ := %{ tCommand(coSupplyOwnership); %}
~/SLO/~ := %{ tCommand(coSolo); %}
~/SND/~ := %{ tCommand(coSendMessage); %}
~/SUB/~ := %{ tCommand(coSubmitOrder); %}
~/SVE/~ := %{ tCommand(coSaveGame); %}
~/THX/~ := %{ tCommand(coThink); %}
~/TME/~ := %{ tCommand(coTimeToDeadline); %}
~/YES/~ := %{ tCommand(coAccept); %}
~/ADM/~ := %{ tCommand(coAdmin); %}
~/SMR/~ := %{ tCommand(coSMR); %}

~/AOA/~ := %{ tParameter(paAnyOrder); %}
~/BTL/~ := %{ tParameter(paBuildTimeLimit); %}
~/ERR/~ := %{ tParameter(paLocationError); %}
~/LVL/~ := %{ tParameter(paLevel); %}
~/MRT/~ := %{ tParameter(paMustRetreat); %}
~/MTL/~ := %{ tParameter(paMoveTimeLimit); %}
~/NPB/~ := %{ tParameter(paNoPressDuringBuild); %}
~/NPR/~ := %{ tParameter(paNoPressDuringRetreat); %}
~/PDA/~ := %{ tParameter(paPartialDrawsAllowed); %}
~/PTL/~ := %{ tParameter(paPressTimeLimit); %}
~/RTL/~ := %{ tParameter(paRetreatTimeLimit); %}
~/UNO/~ := %{ tParameter(paUnowned); %}
~/DSD/~ := %{ tParameter(paDeadlineDisconnect); %}

~/ALY/~ := %{ tPress(prAlly); %}
~/AND/~ := %{ tPress(prAND); %}
~/BWX/~ := %{ tPress(prNoneOfYourBusiness); %} 
~/DMZ/~ := %{ tPress(prDemiliterisedZone); %}
~/ELS/~ := %{ tPress(prELSE); %}
~/EXP/~ := %{ tPress(prExplain); %}
~/FWD/~ := %{ tPress(prRequestForward); %}
~/FCT/~ := %{ tPress(prFact); %}
~/FOR/~ := %{ tPress(prForTurn); %}
~/HOW/~ := %{ tPress(prHowToAttack); %}
~/IDK/~ := %{ tPress(prIDontKnow); %}
~/IFF/~ := %{ tPress(prIF); %}
~/INS/~ := %{ tPress(prInsist); %}
~/OCC/~ := %{ tPress(prOccupy); %}
~/ORR/~ := %{ tPress(prOR); %}
~/PCE/~ := %{ tPress(prPeace); %}
~/POB/~ := %{ tPress(prPosition); %}
~/PRP/~ := %{ tPress(prPropose); %}
~/QRY/~ := %{ tPress(prQuery); %}
~/SCD/~ := %{ tPress(prSupplyDistro); %}
~/SRY/~ := %{ tPress(prSorry); %}
~/SUG/~ := %{ tPress(prSuggest); %}
~/THK/~ := %{ tPress(prThink); %}
~/THN/~ := %{ tPress(prThen); %}
~/TRY/~ := %{ tPress(prTry); %}
~/VSS/~ := %{ tPress(prVersus); %}
~/WHT/~ := %{ tPress(prWhat); %}
~/WHY/~ := %{ tPress(prWhy); %}
~/XDO/~ := %{ tPress(prDo); %}
~/XOY/~ := %{ tPress(prOwes); %}
~/YDO/~ := %{ tPress(prTellMe); %}
~/CHO/~ := %{ tPress(prChoose); %}
~/BCC/~ := %{ tPress(prBCC); %}
~/UNT/~ := %{ tPress(prUNT); %}
~/CCL/~ := %{ tPress(prCCL); %}
~/NAR/~ := %{ tPress(prNAR); %}

error := %{ HLexLog.log("Error: Unknown char sequence '"+%+"'"); null; %}
