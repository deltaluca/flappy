package daide;

import Match;
import daide.Language;
import daide.Tokens;

$(mixin INTEGER(x) tInteger(x));
$(mixin BRA() tLeftParen);
$(mixin KET() tRightParen);
$(mixin POWER(x) tPower(x));
//...
$(mixin UNITTYPE(x) tUnitType(x));
//...
$(mixin CTO() tOrder(oMoveByConvoy));
$(mixin CVY() tOrder(oConvoy));
$(mixin HLD() tOrder(oHold));
$(mixin MTO() tOrder(oMove));
$(mixin SUP() tOrder(oSupport));
$(mixin VIA() tOrder(oVia));
$(mixin DSB() tOrder(oDisband));
$(mixin RTO() tOrder(oRetreat));
$(mixin BLD() tOrder(oBuild));
$(mixin REM() tOrder(oRemove));
$(mixin WVE() tOrder(oWaive));
//...
$(mixin MBV() tOrderNote(onOkay));
$(mixin BPR() tOrderNote(onBPR));
$(mixin CST() tOrderNote(onNoCoastSpecified));
$(mixin ESC() tOrderNote(onNotEmptySupply));
$(mixin FAR() tOrderNote(onNotAdjacent));
$(mixin HSC() tOrderNote(onNotHomeSupply));
$(mixin NAS() tOrderNote(onNotAtSea));
$(mixin NMB() tOrderNote(onNoMoreBuilds));
$(mixin NMR() tOrderNote(onNoMoreRemovals));
$(mixin NRN() tOrderNote(onNoRetreatNeeded));
$(mixin NRS() tOrderNote(onNotRightSeason));
$(mixin NSA() tOrderNote(onNoSuchArmy));
$(mixin NSC() tOrderNote(onNotSupply));
$(mixin NSF() tOrderNote(onNoSuchFleet));
$(mixin NSP() tOrderNote(onNoSuchProvince));
$(mixin NSU() tOrderNote(onNoSuchUnit));
$(mixin NVR() tOrderNote(onNotValidRetreat));
$(mixin NYU() tOrderNote(onNotYourUnit));
$(mixin YSC() tOrderNote(onNotYourSupply));
//...
$(mixin SUC() tResult(rSuccess));
$(mixin BNC() tResult(rMoveBounced));
$(mixin CUT() tResult(rSupportCut));
$(mixin DSR() tResult(rConvoyDisrupted));
$(mixin FLD() tResult(rFLD));
$(mixin NSO() tResult(rNoSuchOrder));
$(mixin RET() tResult(rDislodged));
//...
$(mixin COAST(x) tCoast(x));
$(mixin PHASE(x) tPhase(x));
//...
$(mixin CCD() tCommand(coPowerInCivilDisorder));
$(mixin DRW() tCommand(coDraw));
$(mixin FRM() tCommand(coMessageFrom));
$(mixin GOF() tCommand(coGoFlag));
$(mixin HLO() tCommand(coHello));
$(mixin HST() tCommand(coHistory));
$(mixin HUH() tCommand(coHuh));
$(mixin IAM() tCommand(coIAm));
$(mixin LOD() tCommand(coLoadGame));
$(mixin MAP() tCommand(coMap));
$(mixin MDF() tCommand(coMapDefinition));
$(mixin MIS() tCommand(coMissingOrders));
$(mixin NME() tCommand(coName));
$(mixin NOT() tCommand(coNOT));
$(mixin NOW() tCommand(coCurrentPosition));
$(mixin OBS() tCommand(coObserver));
$(mixin OFF() tCommand(coTurnOff));
$(mixin ORD() tCommand(coOrderResult));
$(mixin OUT() tCommand(coPowerEliminated));
$(mixin PRN() tCommand(coParenthesisError));
$(mixin REJ() tCommand(coReject));
$(mixin SCO() tCommand(coSupplyOwnership));
$(mixin SLO() tCommand(coSolo));
$(mixin SND() tCommand(coSendMessage));
$(mixin SUB() tCommand(coSubmitOrder));
$(mixin SVE() tCommand(coSaveGame));
$(mixin THX() tCommand(coThink));
$(mixin TME() tCommand(coTimeToDeadline));
$(mixin YES() tCommand(coAccept));
$(mixin ADM() tCommand(coAdmin));
$(mixin SMR() tCommand(coSMR));
//...
$(mixin PARAMETER(x) tParameter(x));
//...
$(mixin ALY() tPress(prAlly));
$(mixin AND() tPress(prAND));
$(mixin BWX() tPress(prNoneOfYourBusiness));
$(mixin DMZ() tPress(prDemiliterisedZone));
$(mixin ELS() tPress(prELSE));
$(mixin EXP() tPress(prExplain));
$(mixin FWD() tPress(prRequestForward));
$(mixin FCT() tPress(prFact));
$(mixin FOR() tPress(prForTurn));
$(mixin HOW() tPress(prHowToAttack));
$(mixin IDK() tPress(prIDontKnow));
$(mixin IFF() tPress(prIF));
$(mixin INS() tPress(prInsist));
$(mixin OCC() tPress(prOccupy));
$(mixin ORR() tPress(prOR));
$(mixin PCE() tPress(prPeace));
$(mixin POB() tPress(prPosition));
$(mixin PRP() tPress(prPropose));
$(mixin QRY() tPress(prQuery));
$(mixin SCD() tPress(prSupplyDistro));
$(mixin SRY() tPress(prSorry));
$(mixin SUG() tPress(prSuggest));
$(mixin THK() tPress(prThink));
$(mixin THN() tPress(prThen));
$(mixin TRY() tPress(prTry));
$(mixin VSS() tPress(prVersus));
$(mixin WHT() tPress(prWhat));
$(mixin WHY() tPress(prWhy));
$(mixin XDO() tPress(prDo));
$(mixin XOY() tPress(prOwes));
$(mixin YDO() tPress(prTellMe));
$(mixin CHO() tPress(prChoose));
$(mixin BCC() tPress(prBCC));
$(mixin UNT() tPress(prUNT));
$(mixin CCL() tPress(prCCL));
$(mixin NAR() tPress(prNAR));
//...
$(mixin PROVINCE(x) tProvince(x));
$(mixin TEXT(x) tText(x));

class Unparser {
	public static function unparse(x:Message):Array<Token> {
		return Match.match(x,
			mName(x,y) 					= [NME,BRA,TEXT(x),KET,BRA,TEXT(y),KET],
			mObserver  					= [OBS],
			mIAm(x,y)  					= [IAM,BRA,POWER(x),KET,BRA,INTEGER(y),KET],
			mMap(null) 					= [MAP],
		 mMapDefinition(null,null,null) = [MDF],
			mAccept(x) 					= [YES,BRA].concat(unparse(x)).concat([KET]),
			mReject(x) 					= [REJ,BRA].concat(unparse(x)).concat([KET]),
			mCurrentLocation(null,null) = [NOW],
			mSupplyOwnership(null) 		= [SCO],
			mHistory(turn) 				= [HST,BRA].concat(unturn(turn)).concat([KET]),
			mTimeToDeadline(null) 		= [TME],
			mTimeToDeadline(x) 			= [TME,BRA,INTEGER(x),KET],
			mAdmin(x,y) 				= [ADM,BRA,TEXT(x),KET,BRA,TEXT(y),KET],
			mBadBrackets(xs) 			= [PRN,BRA].concat(xs).concat([KET]),
			mHuh(xs) 					= [HUH,BRA].concat(xs).concat([KET]),
			mHello(null,null,null) 		= [HLO],
			mSubmit(null,xs) 			= [SUB].concat(unorder_list(xs)),
			mSubmit(turn,xs) 			= [SUB, BRA].concat(unturn(turn)).concat([KET]).concat(unorder_list(xs)),
			mNOT(x) 					= [NOT,BRA].concat(unparse(x)).concat([KET]),
			mMissingOrders(null,null)	= [MIS],
			mGoFlag 					= [GOF],
			mOrderResult(null,null,null)= [ORD],
			mDraw(null) 				= [DRW],
			mDraw(xs) 					= [DRW,BRA].concat(unpower_list(xs)).concat([KET]),
// send_message (vv)
			mSend(turn,x,y,z) = {
				var pre = [SND,BRA];
				if(turn!=null) pre = pre.concat(unturn(turn)).concat([KET,BRA]);
				pre = pre.concat(unpower_list(x)).concat([KET,BRA]);
				pre.concat(if(z==null) unpress_message(y) else unreply(z)).concat([KET]);
			},			

/** mAccept(x) - duplicate **/
/** mReject(x) - duplicate **/
			mMap(x) = [MAP,BRA,TEXT(x),KET],
// mMapDefinition(
			mHello(x,y,z) = [HLO,BRA,POWER(x),KET,BRA,INTEGER(y),KET,BRA].concat(unvariant(z)).concat([KET]),
			mCurrentLocation(x,y) = [NOW,BRA].concat(unturn(x)).concat([KET]).concat(ununit_with_location_and_mrt_list(y)),
// mSupplyOwnership
// mThink
			mMissingOrders(null,x) = [MIS].concat(ununit_with_location_and_mrt_list(x)),
			mMissingOrders(x,null) = [MIS,BRA,INTEGER(x),KET],
// mOrderResult
			mSaveGame(x) = [SVE,BRA,TEXT(x),KET],
			mLoadGame(x) = [LOD,BRA,TEXT(x),KET],
			mTurnOff = [OFF],
/** mTimeToDeadline(x) - duplicate **/
/** mBadBrackets(x) - duplicate **/
/** mHuh(x) - duplicate **/
			mPowerDisorder(x) = [CCD,BRA,POWER(x),KET],
			mNOT(x) = [NOT,BRA].concat(unparse(x)).concat([KET]),
/** mAdmin(x,y) - duplicate **/
			mSolo(x) = [SLO,BRA,INTEGER(x),KET],
			mPowerEliminated(x) = [OUT,BRA,POWER(x),KET]
/** mDraw(x) - duplicate **/
		);
		return [];
	}

	static function unmdf_province_list(xs:Array<Location>):Array<Token> {
		var ret = [];
		for(x in xs) ret = ret.concat(unmdf_province(x));
		return ret;
	}
	
	static function ununit_with_location_and_mrt(x:UnitWithLocAndMRT):Array<Token> {
		return if(x.locs==null) ununit_with_location(x.unitloc);
		else ununit_with_location(x.unitloc).concat([MRT,BRA]).concat(unmdf_province_list(x.locs)).concat([KET]);
	}

	static function ununit_with_location_list(xs:Array<UnitWithLoc>):Array<Token> {
		var ret = [];
		for(x in xs) {
			ret.push(BRA);
			ret = ret.concat(ununit_with_location(x));
			ret.push(KET);
		}
		return ret;
	}

	static function ununit_with_location_and_mrt_list(xs:Array<UnitWithLocAndMRT>):Array<Token> {
		var ret = [];
		for(x in xs) {
			ret.push(BRA);
			ret = ret.concat(ununit_with_location_and_mrt(x));
			ret.push(KET);
		}
		return ret;
	}

	static function unvariant(o:Variant):Array<Token> {
		var ret = [];
		for(v in o) {
			ret.push(BRA);
			ret = ret.concat(unvariant_option(v));
			ret.push(KET);
		}
		return ret;
	}

	static function unvariant_option(o:VariantOption):Array<Token> {
		var ret = [PARAMETER(o.par)];
		if(o.val!=null) ret.push(INTEGER(o.val));
		return ret;
	}

	static function unturn(t:Turn):Array<Token> return [PHASE(t.phase)].concat([INTEGER(t.turn)])
	static function unorder_list(xs:Array<MsgOrder>):Array<Token> {
		var ret = [];
		for(i in xs) ret = ret.concat([BRA]).concat(unorder(i)).concat([KET]);
		return ret;
	}
	static function unorder(x:MsgOrder):Array<Token> {
		return Match.match(x,
			moHold(x) = [BRA].concat(ununit_with_location(x)).concat([KET,HLD])
		);
	}
	static function ununit_with_location(x:UnitWithLoc):Array<Token> {
		return [POWER(x.power),tUnitType(x.type)].concat(unmdf_province(x.location));
	}
	static function unmdf_province(x:Location):Array<Token> {
		if(x.coast==null) return [PROVINCE(x.province)];
		else return [BRA].concat(unprovince_and_coast(x)).concat([KET]);	
	}
	static function unprovince_and_coast(x:Location):Array<Token> {
		return [PROVINCE(x.province),COAST(x.coast)];	
	}
	static function unpower_list(xs:Array<Int>):Array<Token> {
		var ret = [];
		for(i in xs) ret.push(POWER(i));
		return ret;
	}
	static function unprovince_list(xs:Array<Province>):Array<Token> {
		var ret = [];
		for(i in xs) ret.push(PROVINCE(i));
		return ret;
	}

	static function unexplanation(x:Explanation):Array<Token> {
		return [EXP,BRA].concat(unturn(x.turn)).concat([KET,BRA]).concat(unreply(x.reply)).concat([KET]);
	}

	static function unfuture_offer(x:FutureOffer):Array<Token> {
		return [PCE,BRA].concat(unpower_list(x)).concat([KET]);
	}

	static function unperiod(x:Period):Array<Token> {
		 return [BRA].concat(unturn(x.from)).concat([KET,BRA]).concat(unturn(x.to)).concat([KET]);
	}

	static function unsc_ownership_list(x:ScOwnershipList):Array<Token> {
		return [if(x.power==null) UNO else POWER(x.power)].concat(unprovince_list(x.locs));
	}

	static function unsc_ownership_list_list(x:Array<ScOwnershipList>):Array<Token> {
		var ret = [];
		for(i in xs) {
			ret.push(BRA);
			ret = ret.concat(unsc_ownership_list(i));
			ret.push(KET);
		}
		return ret;
	}

	static function unarrangement(ar:Arrangement):Array<Token> {
		return Match.match(ar,
			arPeace(xs) = [PCE,BRA].concat(unpower_list(xs)).concat([KET]),
			arAlly(x,y) = [ALY,BRA].concat(unpower_list(x)).concat([KET,VSS,BRA]).concat(unpower_list(y)).concat([KET]),
			arDraw = [DRW],
			arSolo(x) = [SLO,BRA,POWER(x),KET],
			arNOT(x) = [NOT,BRA].concat(unarrangement(x)).concat([KET]),
			arNAR(x) = [NAR,BRA].concat(unarrangement(x)).concat([KET]),
			arXDO(x) = [XDO,BRA].concat(unorder(x)).concat([KET]),
			arDMZ(x,y) = [DMZ,BRA].concat(unpower_list(x)).concat([KET,BRA]).concat(unprovince_list(y)).concat([KET]),
			arSCD(x) = [SCD].concat(unsc_ownership_list_list(x)),
			arOCC(x) = [OCC].concat(ununit_with_location_list(x)),
			arAND(x) = [AND].concat(unarrangement_list(x)),
			arOR(x)  = [ORR].concat(unarrangement_list(x)),
			arCHO(x,y,z) = [CHO,BRA,INTEGER(x),INTEGER(y),KET].concat(unfuture_offer(z)).concat([KET]),
			arFOR(x,null,z) = [FOR,BRA].concat(unturn(x)).concat([KET,BRA]).concat(unfuture_offer(z)).concat([KET]),
			arFOR(null,y,z) = [FOR,BRA].concat(unperiod(y)).concat([KET,BRA]).concat(unfuture_offer(z)).concat([KET]),
			arXOY(a,b) = [XOY,BRA,POWER(a),KET,BRA,POWER(b),KET],
			arYDO(x,y) = [YDO,BRA,POWER(x),KET].concat(ununit_with_location_list(y)),
			arSND(x,y,z,null) = [SND,BRA,POWER(x),KET,BRA].concat(unpower_list(y)).concat([KET,BRA]).concat(unpress_message(z)).concat([KET]),
			arSND(x,y,null,z) = [SND,BRA,POWER(x),KET,BRA].concat(unpower_list(y)).concat([KET,BRA]).concat(unreply(y)).concat([KET]),
			arFWD(x,y,z) = [FWD,BRA].concat(unpower_list(x)).concat([KET,BRA,POWER(y),KET,BRA,POWER(z),KET]),
			arBCC(x,y,z) = [BCC,BRA,POWER(x),KET,BRA].concat(unpower_list(y)).concat([KET,BRA,POWER(z),KET])
		);
	}

	static function unarrangement_list(xs:Array<Arrangement>):Array<Token> {
		var ret = [];
		for(x in xs) {
			ret.push(BRA);
			ret = ret.concat(unarrangement(x));
			ret.push(KET);
		}
		return ret;
	}

	static function unquery(x:Arrangement):Array<Token> return [QRY,BRA].concat(unarrangement(x)).concat([KET])

	static function unnegatable_query(x:NegQuery):Array<Token> {
		return Match.match(x,
			negQRY(y) = [QRY,BRA].concat(unarrangement(y)).concat([KET]),
			negNOT(y) = [NOT,BRA].concat(unquery(y)).concat([KET])
		);
	}

	static function unlogical_operator(x:LogicalOp):Array<Token> {
		return [if(x.and) AND else ORR].concat(unarrangement_list(x.list));
	}

	static function unpress_message(x:PressMsg):Array<Token> {
		return Match.match(x,
			pmPRP(x,null) = [PRP,BRA].concat(unarrangement(x)).concat([KET]),
			pmPRP(null,y) = [PRP,BRA].concat(unlogical_operator(y)).concat([KET]),
			pmTRY(x) = [TRY,BRA].concat(x).concat([KET]),
			pmCCL(x) = [CCL,BRA].concat(unpress_message(x)).concat([KET]),
			pmINS(x) = [INS,BRA].concat(unarrangement(x)).concat([KET]),
			pmQRY(x) = [QRY,BRA].concat(unarrangement(x)).concat([KET]),
			pmSUG(x) = [SUG,BRA].concat(unarrangement(x)).concat([KET]),
			pmTHK(x) = [THK,BRA].concat(unarrangement(x)).concat([KET]),
			pmFCT(x) = [FCT,BRA].concat(unarrangement(x)).concat([KET]),
			pmWHT(x) = [WHT,BRA].concat(ununit_with_location(x)).concat([KET]),
			pmHOW(x,null) = [HOW,BRA].concat(PROVINCE(x)).concat([KET]),
			pmHOW(null,x) = [HOW,BRA].concat(POWER(x)).concat([KET]),
			pmEXP(x,y) = [EXP,BRA].concat(unturn(x)).concat([KET,BRA]).concat(unreply(y)).concat([KET]),
			pmIFF(x,y,null) = [IFF,BRA].concat(unarrangement(x)).concat([KET,THN,BRA]).concat(unpress_message(y)).concat([KET]),
			pmIFF(x,y,z) = [IFF,BRA].concat(unarrangement(x)).concat([KET,THN,BRA]).concat(unpress_message(y)).concat([KET,ELS,BRA]).concat(unpress_message(z)).concat([KET]),
			pmFRM(x,y,z,w,null) = [FRM,BRA,POWER(x),INTEGER(y),KET,BRA].concat(unpower_list(z)).concat([KET,BRA]).concat(unpress_message(w)).concat([KET]),
			pmFRM(x,y,z,null,w) = [FRM,BRA,POWER(x),INTEGER(y),KET,BRA].concat(unpower_list(z)).concat([KET,BRA]).concat(unreply(w)).concat([KET]),
			pmText(x) = [TEXT(x)]
		);
	}

	static function unreply(x:ReplyMsg):Array<Token> {
		return Match.match(x,
			rmYes(x,null) = [YES,BRA].concat(unpress_message(x)).concat([KET]),
			rmYes(null,x) = [YES,BRA].concat(unexplanation(x)).concat([KET]),
			rmRej(x,null) = [REJ,BRA].concat(unpress_message(x)).concat([KET]),
			rmRej(null,x) = [REJ,BRA].concat(unexplanation(x)).concat([KET]),
			rmBWX(x) = [BWX,BRA].concat(unpress_message(x)).concat([KET]),
			rmHUH(x) = [HUH,BRA].concat(x).concat([KET]),
			rmTHK(x) = [THK,BRA].concat(unnegatable_query(x)).concat([KET]),
			rmFCT(x) = [FCT,BRA].concat(unnegatable_query(x)).concat([KET]),
			rmSRY(x) = [SRY,BRA].concat(unexplanation(x)).concat([KET]),
			rmPOB(x) = [POB,BRA].concat(unwhy_sequence(x)).concat([KET]),
			rmWHY(y) = [WHY,BRA].concat(unwhy(y)).concat([KET]),
			rmIDK(y) = [IDK,BRA].concat(unwhy(y)).concat([KET]),
			rmPress(x) = unpress_message(x)
		);
	}
	static function unwhy(x:WhyIDK):Array<Token> {
		return Match.match(x,
			whyThinkFact(x) = unthink_and_fact(x),
			whyQry(x) = unquery(x),
			whyExp(x) = unexplanation(x),
			whySug(x) = [SUG,BRA].concat(unarrangement(x)).concat([KET]),
			whyPRP(x) = [PRP,BRA].concat(unarrangement(x)).concat([KET]),
			whyINS(x) = [INS,BRA].concat(unarrangement(x)).concat([KET])
		);
	}

	static function unthink_and_fact(x:ThinkAndFact):Array<Token> {
		return [if(x.thk) THK else FCT, BRA].concat(unarrangement(x.arr)).concat([KET]);
	}
	static function unwhy_sequence(x:ThinkAndFact):Array<Token> return [WHY,BRA].concat(unthink_and_fact(x)).concat([KET])
}
