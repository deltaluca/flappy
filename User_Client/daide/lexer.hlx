//ignore whitespace
NULL 0 : ws := ~/[\n\r \t]/~

%{
	import daide.Tokens;
	class HLexLog {
		public static var logger:String->Void = null;
		public static function log(x:String) {
			logger(x);
		}
	}
%}

-1 : ~/([0-9]+)|(0x[0-9a-fA-F]+)/~ := %{ tInteger(Std.parseInt(%)); %}
-1 : ~/("([^\\"\r\n]|\\.)*")|('([^\\'\r\n]|\\.)*')/~ := %{ tText(%.substr(1,%.length-2)); %}

 0 : ~/\(/~ := %{ tLeftParen;  %}
 0 : ~/\)/~ := %{ tRightParen; %}

 0 : ~/AMY/~ := %{ tUnitType(utArmy);  %} 
 0 : ~/FLT/~ := %{ tUnitType(utFleet); %} 

 0 : ~/CTO/~ := %{ tOrder(oMoveByConvoy); %}
 0 : ~/CVY/~ := %{ tOrder(oConvoy); %}
 0 : ~/HLD/~ := %{ tOrder(oHold); %}
 0 : ~/MTO/~ := %{ tOrder(oMove); %}
 0 : ~/SUP/~ := %{ tOrder(oSupport); %}
 0 : ~/VIA/~ := %{ tOrder(oVia); %}
 0 : ~/DSB/~ := %{ tOrder(oDisband); %}
 0 : ~/RTO/~ := %{ tOrder(oRetreat); %}
 0 : ~/BLD/~ := %{ tOrder(oBuild); %}
 0 : ~/REM/~ := %{ tOrder(oRemove); %}
 0 : ~/WVE/~ := %{ tOrder(oWaive); %}

 0 : ~/MBV/~ := %{ tOrderNote(onOkay); %}
 0 : ~/BPR/~ := %{ tOrderNote(onBPR); %}
 0 : ~/CST/~ := %{ tOrderNote(onNoCoastSpecified); %}
 0 : ~/ESC/~ := %{ tOrderNote(onNotEmptySupply); %}
 0 : ~/FAR/~ := %{ tOrderNote(onNotAdjacent); %}
 0 : ~/HSC/~ := %{ tOrderNote(onNotHomeSupply); %}
 0 : ~/NAS/~ := %{ tOrderNote(onNotAtSea); %}
 0 : ~/NMB/~ := %{ tOrderNote(onNoMoreBuilds); %}
 0 : ~/NMR/~ := %{ tOrderNote(onNoMoreRemovals); %}
 0 : ~/NRN/~ := %{ tOrderNote(onNoRetreatNeeded); %}
 0 : ~/NRS/~ := %{ tOrderNote(onNotRightSeason); %}
 0 : ~/NSA/~ := %{ tOrderNote(onNoSuchArmy); %}
 0 : ~/NSC/~ := %{ tOrderNote(onNotSupply); %}
 0 : ~/NSF/~ := %{ tOrderNote(onNoSuchFleet); %}
 0 : ~/NSP/~ := %{ tOrderNote(onNoSuchProvince); %}
 0 : ~/NST/~ := %{ tOrderNote(onNST); %}
 0 : ~/NSU/~ := %{ tOrderNote(onNoSuchUnit); %}
 0 : ~/NVR/~ := %{ tOrderNote(onNotValidRetreat); %}
 0 : ~/NYU/~ := %{ tOrderNote(onNotYourUnit); %}
 0 : ~/YSC/~ := %{ tOrderNote(onNotYourSupply); %}

 0 : ~/SUC/~ := %{ tResult(rSuccess); %}
 0 : ~/BNC/~ := %{ tResult(rMoveBounced); %}
 0 : ~/CUT/~ := %{ tResult(rSupportCut); %}
 0 : ~/DSR/~ := %{ tResult(rConvoyDisrupted); %}
 0 : ~/FLD/~ := %{ tResult(rFLD); %}
 0 : ~/NSO/~ := %{ tResult(rNoSuchOrder); %}
 0 : ~/RET/~ := %{ tResult(rDislodged); %}

 0 : ~/NCS/~ := %{ tCoast(cNorth); %}
 0 : ~/NEC/~ := %{ tCoast(cNorthEast); %}
 0 : ~/ECS/~ := %{ tCoast(cEast); %}
 0 : ~/SEC/~ := %{ tCoast(cSouthEast); %}
 0 : ~/SCS/~ := %{ tCoast(cSouth); %}
 0 : ~/SWC/~ := %{ tCoast(cSouthWest); %}
 0 : ~/WCS/~ := %{ tCoast(cWest); %}
 0 : ~/NWC/~ := %{ tCoast(cNorthWest); %}

 0 : ~/SPR/~ := %{ tPhase(pSpring); %}
 0 : ~/SUM/~ := %{ tPhase(pSummer); %}
 0 : ~/FAL/~ := %{ tPhase(pFall); %}
 0 : ~/AUT/~ := %{ tPhase(pAutumn); %}
 0 : ~/WIN/~ := %{ tPhase(pWinter); %} 

 0 : ~/CCD/~ := %{ tCommand(coPowerInCivilDisorder); %}
 0 : ~/DRW/~ := %{ tCommand(coDraw); %}
 0 : ~/FRM/~ := %{ tCommand(coMessageFrom); %}
 0 : ~/GOF/~ := %{ tCommand(coGoFlag); %}
 0 : ~/HLO/~ := %{ tCommand(coHello); %}
 0 : ~/HST/~ := %{ tCommand(coHistory); %}
 0 : ~/HUH/~ := %{ tCommand(coHuh); %}
 0 : ~/IAM/~ := %{ tCommand(coIAm); %}
 0 : ~/LOD/~ := %{ tCommand(coLoadGame); %}
 0 : ~/MAP/~ := %{ tCommand(coMap); %}
 0 : ~/MDF/~ := %{ tCommand(coMapDefinition); %}
 0 : ~/MIS/~ := %{ tCommand(coMissingOrders); %}
 0 : ~/NME/~ := %{ tCommand(coName); %}
 0 : ~/NOT/~ := %{ tCommand(coNOT); %}
 0 : ~/NOW/~ := %{ tCommand(coCurrentPosition); %}
 0 : ~/OBS/~ := %{ tCommand(coObserver); %}
 0 : ~/OFF/~ := %{ tCommand(coTurnOff); %}
 0 : ~/ORD/~ := %{ tCommand(coOrderResult); %}
 0 : ~/OUT/~ := %{ tCommand(coPowerEliminated); %}
 0 : ~/PRN/~ := %{ tCommand(coParenthesisError); %}
 0 : ~/REJ/~ := %{ tCommand(coReject); %}
 0 : ~/SCO/~ := %{ tCommand(coSupplyOwnership); %}
 0 : ~/SLO/~ := %{ tCommand(coSolo); %}
 0 : ~/SND/~ := %{ tCommand(coSendMessage); %}
 0 : ~/SUB/~ := %{ tCommand(coSubmitOrder); %}
 0 : ~/SVE/~ := %{ tCommand(coSaveGame); %}
 0 : ~/THX/~ := %{ tCommand(coThink); %}
 0 : ~/TME/~ := %{ tCommand(coTimeToDeadline); %}
 0 : ~/YES/~ := %{ tCommand(coAccept); %}
 0 : ~/ADM/~ := %{ tCommand(coAdmin); %}

 0 : ~/AOA/~ := %{ tParameter(paAnyOrder); %}
 0 : ~/BTL/~ := %{ tParameter(paBuildTimeLimit); %}
 0 : ~/ERR/~ := %{ tParameter(paLocationError); %}
 0 : ~/LVL/~ := %{ tParameter(paLevel); %}
 0 : ~/MRT/~ := %{ tParameter(paMustRetreat); %}
 0 : ~/MTL/~ := %{ tParameter(paMoveTimeLimit); %}
 0 : ~/NPB/~ := %{ tParameter(paNoPressDuringBuild); %}
 0 : ~/NPR/~ := %{ tParameter(paNoPressDuringRetreat); %}
 0 : ~/PDA/~ := %{ tParameter(paPartialDrawsAllowed); %}
 0 : ~/PTL/~ := %{ tParameter(paPressTimeLimit); %}
 0 : ~/RTL/~ := %{ tParameter(paRetreatTimeLimit); %}
 0 : ~/UNO/~ := %{ tParameter(paUnowned); %}
 0 : ~/DSD/~ := %{ tParameter(paDeadlineDisconnect); %}

 0 : ~/ALY/~ := %{ tPress(prAlly); %}
 0 : ~/AND/~ := %{ tPress(prAND); %}
 0 : ~/BWX/~ := %{ tPress(prNoneOfYourBusiness); %} 
 0 : ~/DMZ/~ := %{ tPress(prDemiliterisedZone); %}
 0 : ~/ELS/~ := %{ tPress(prELSE); %}
 0 : ~/EXP/~ := %{ tPress(prExplain); %}
 0 : ~/FWD/~ := %{ tPress(prRequestForward); %}
 0 : ~/FCT/~ := %{ tPress(prFact); %}
 0 : ~/FOR/~ := %{ tPress(prForTurn); %}
 0 : ~/HOW/~ := %{ tPress(prHowToAttack); %}
 0 : ~/IDK/~ := %{ tPress(prIDontKnow); %}
 0 : ~/IFF/~ := %{ tPress(prIF); %}
 0 : ~/INS/~ := %{ tPress(prInsist); %}
 0 : ~/IOU/~ := %{ tPress(prIOU); %}
 0 : ~/OCC/~ := %{ tPress(prOccupy); %}
 0 : ~/ORR/~ := %{ tPress(prOR); %}
 0 : ~/PCE/~ := %{ tPress(prPeace); %}
 0 : ~/POB/~ := %{ tPress(prPosition); %}
 0 : ~/PPT/~ := %{ tPress(prPPT); %}
 0 : ~/PRP/~ := %{ tPress(prPropose); %}
 0 : ~/QRY/~ := %{ tPress(prQuery); %}
 0 : ~/SCD/~ := %{ tPress(prSupplyDistro); %}
 0 : ~/SRY/~ := %{ tPress(prSorry); %}
 0 : ~/SUG/~ := %{ tPress(prSuggest); %}
 0 : ~/THK/~ := %{ tPress(prThink); %}
 0 : ~/THN/~ := %{ tPress(prThen); %}
 0 : ~/TRY/~ := %{ tPress(prTry); %}
 0 : ~/UOM/~ := %{ tPress(prUOM); %}
 0 : ~/VSS/~ := %{ tPress(prVersus); %}
 0 : ~/WHT/~ := %{ tPress(prWhat); %}
 0 : ~/WHY/~ := %{ tPress(prWhy); %}
 0 : ~/XDO/~ := %{ tPress(prDo); %}
 0 : ~/XOY/~ := %{ tPress(prOwes); %}
 0 : ~/YDO/~ := %{ tPress(prTellMe); %}
 0 : ~/WRT/~ := %{ tPress(prWRT); %}

attr(error_tok) := %{ HLexLog.log("Error: Unknown char sequence '"+%+"'"); null; %}
