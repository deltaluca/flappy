//all tokens, must match the nested ordering of
//tokens in daide.Tokens
%token INTEGER
%token BRA
%token KET
%token POWER
%token AMY FLT
%token CTO CVY HLD MTO SUP VIA DSB RTO BLD REM WVE
%token MBV BPR CST ESC FAR HSC NAS NMB NMR NRN NRS NSA NSC NSF NSP NSU NVR NYU YSC 
%token SUC BNC CUT DSR FLD NSO RET
%token NCS NEC ECS SEC SCS SWC WCS NWC
%token SPR SUM FAL AUT WIN
%token CCD DRW FRM GOF HLO HST HUH IAM LOD MAP MDF MIS NME NOT NOW OBS OFF ORD OUT PRN REJ SCO SLO SND SUB SVE THX TME YES ADM SMR
%token AOA BTL ERR LVL MRT MTL NPB NPR PDA PTL RTL UNO DSD
%token ALY AND BWX DMZ ELS EXP FWD FCT FOR HOW IDK IFF INS OCC ORR PCE POB PRP QRY SCD SRY SUG THK THN TRY VSS WHT WHY XDO XOY YDO CHO BCC UNT CCL NAR
%token TEXT
%token INLAND SEA COASTAL BICOASTAL

%{

import daide.Tokens;
import daide.Language;
import Type;

class TU {

	static public function text(t:Token) {
		return switch(t) { case tText(x): x; default: null; };
	}
	static public function integer(t:Token) {
		return switch(t) { case tInteger(x): x; default: -1; };
	}
	static public function power(t:Token) {
		return switch(t) { case tPower(x): x; default: -1; };
	}
	static public function province(t:Token) {
		return switch(t) { case tProvince(x): x; default: null; };
	}
	static public function coast(t:Token) {
		return switch(t) { case tCoast(x): x; default: null; };
	}
	static public function unitType(t:Token) {
		return switch(t) { case tUnitType(x): x; default: null; };
	}
	static public function phase(t:Token) {
		return switch(t) { case tPhase(x): x; default: null; };
	}
	static public function parameter(t:Token) {
		return switch(t) { case tParameter(x): x; default: null; };
	}

	//need a mapping [0,#tokens) in order tokens are declared
	//this is complicated due to the nesting of Token declarations
	//otherwise could have simply used Type.enumIndex(t)
	static var offsets:Array<Int> = null;
	static public function index(t:Token) {
		if(offsets==null) {
			offsets = [0,1,2,3,4];
			offsets.push(offsets[offsets.length-1] + Type.getEnumConstructs(UnitType).length);
			offsets.push(offsets[offsets.length-1] + Type.getEnumConstructs(Order).length);
			offsets.push(offsets[offsets.length-1] + Type.getEnumConstructs(OrderNote).length);
			offsets.push(offsets[offsets.length-1] + Type.getEnumConstructs(Result).length);
			offsets.push(offsets[offsets.length-1] + Type.getEnumConstructs(Coast).length);
			offsets.push(offsets[offsets.length-1] + Type.getEnumConstructs(Phase).length);
			offsets.push(offsets[offsets.length-1] + Type.getEnumConstructs(Command).length);
			offsets.push(offsets[offsets.length-1] + Type.getEnumConstructs(Parameter).length);
			offsets.push(offsets[offsets.length-1] + Type.getEnumConstructs(Press).length);
			offsets.push(offsets[offsets.length-1] + 1);
		}

		var off = offsets[Type.enumIndex(t)];
		var pars = Type.enumParameters(t);
		var ind = if(pars.length==0) 0 else Type.enumIndex(pars[0]);
		if(ind==-1) ind = 0;
		return off + ind;
	}
}
 
%}

%entry message

%message %{ Message %}
	: client_server_message
	| server_client_message
;

%client_server_message %{ Message %}
	: NME BRA TEXT KET BRA TEXT KET 			%{ mName(TU.text(%2),TU.text(%5)); %}
	| OBS 										%{ mObserver; %}
	| IAM BRA POWER KET BRA INTEGER KET			%{ mIAm(TU.power(%2),TU.integer(%5)); %}
	| MAP 										%{ mMap(null); %}
	| MDF 										%{ mMapDefinition(null,null,null); %}
	| YES BRA acknowledgable_command KET 		%{ mAccept(%2); %}
	| REJ BRA acknowledgable_command KET 		%{ mReject(%2); %}
	| NOW 										%{ mCurrentLocation(null,null); %}
	| SCO 										%{ mSupplyOwnership(null); %}
	| HST BRA turn KET 							%{ mHistory(%2); %}
	| TME BRA INTEGER KET 						%{ mTimeToDeadline(TU.integer(%2)); %}
	| TME 										%{ mTimeToDeadline(null); %}
	| ADM BRA TEXT KET BRA TEXT KET 			%{ mAdmin(TU.text(%2),TU.text(%5)); %}
	| PRN BRA bad_bracketed_sequence KET 		%{ mBadBrackets(%2); %}
	| HUH BRA any_token_sequence KET 			%{ mHuh(%2); %}
	| HLO 										%{ mHello(null,null,null); %}
	| SUB order_list 							%{ mSubmit(null,%1); %}
	| SUB BRA turn KET order_list 				%{ mSubmit(%2,%4); %}
	| NOT BRA negatable_command KET 			%{ mNOT(%2); %}		
	| MIS 										%{ mMissingOrders(null,null); %}
	| GOF 										%{ mGoFlag; %}
	| ORD 										%{ mOrderResult(null,null,null); %}
	| DRW 										%{ mDraw(null); %}
	| DRW BRA POWER power_list KET 				%{ %3.unshift(TU.power(%2)); mDraw(%3); %}
	| send_message
;

%server_client_message %{ Message %}
	: YES BRA client_command KET 				%{ mAccept(%2); %}
	| YES BRA client_request KET 				%{ mAccept(%2); %}
	| REJ BRA client_request KET 				%{ mReject(%2); %}
	| REJ BRA rejectable_client_command KET 	%{ mReject(%2); %}
	| MAP BRA TEXT KET 							%{ mMap(TU.text(%2)); %}
	| MDF BRA power_list KET BRA mdf_provinces KET BRA mdf_adjacencies KET %{ mMapDefinition(%2,%5,%8); %}
	| HLO BRA POWER KET BRA INTEGER KET BRA variant KET %{ mHello(TU.power(%2),TU.integer(%5),%8); %}
	| NOW BRA turn KET unit_with_location_and_mrt_list %{ mCurrentLocation(%2,%4); %}
	| SCO sco_entry_list 						%{ mSupplyOwnership(%1); %}
	| THX BRA order KET BRA order_note KET 		%{ mThink(%2,%5); %}
	| MIS unit_with_location_and_mrt_list 		%{ mMissingOrders(null,%1); %}
	| MIS BRA INTEGER KET 						%{ mMissingOrders(TU.integer(%2),null); %}
	| ORD BRA turn KET BRA order KET BRA compound_order_result KET %{ mOrderResult(%2,%5,%8); %}
	| SVE BRA TEXT KET 							%{ mSaveGame(TU.text(%2)); %}
	| LOD BRA TEXT KET 							%{ mLoadGame(TU.text(%2)); %}
	| OFF 										%{ mTurnOff; %}
	| TME BRA INTEGER KET 						%{ mTimeToDeadline(TU.integer(%2)); %}
	| PRN BRA bad_bracketed_sequence KET 		%{ mBadBrackets(%2); %}
	| HUH BRA any_token_sequence KET 			%{ mHuh(%2); %}
	| CCD BRA POWER KET 						%{ mPowerDisorder(TU.power(%2)); %}
	| NOT BRA negated_server_message KET 		%{ mNOT(%2); %}
	| ADM BRA TEXT KET BRA TEXT KET 			%{ mAdmin(TU.text(%2),TU.text(%5));  %}
	| SLO BRA INTEGER KET 						%{ mSolo(TU.integer(%2));  %}
	| DRW 										%{ mDraw(null); %}
	| OUT BRA POWER KET 						%{ mPowerEliminated(TU.power(%2)); %}
	| DRW BRA POWER power_list KET 				%{ %3.unshift(TU.power(%2)); mDraw(%3); %}
	| FRM BRA POWER INTEGER KET BRA power_list KET BRA press_message KET %{ mFrom(TU.power(%2),TU.integer(%3),%6,%9,null); %}
	| FRM BRA POWER INTEGER KET BRA power_list KET BRA reply KET         %{ mFrom(TU.power(%2),TU.integer(%3),%6,null,%9); %}
;

%acknowledgable_command %{ Message %}
	: MAP BRA TEXT KET 			%{ mMap(TU.text(%2)); %}
	| SVE BRA TEXT KET 			%{ mSaveGame(TU.text(%2)); %}
;

%client_command %{ Message %}
	: OBS 					%{ mObserver; %}
	| NOT BRA TME KET 		%{ mNOT(mTimeToDeadline(null)); %}
;

%client_request %{ Message %}
	: NME BRA TEXT KET BRA TEXT KET 	%{ mName(TU.text(%2),TU.text(%5)); %}
	| IAM BRA POWER KET BRA INTEGER KET 	%{ mIAm(TU.power(%2),TU.integer(%5)); %}
	| NOT BRA GOF KET 						%{ mNOT(mGoFlag); %}
	| GOF 									%{ mGoFlag; %}
	| TME BRA INTEGER KET 					%{ mTimeToDeadline(TU.integer(%2)); %}
	| DRW 									%{ mDraw(null); %}
	| NOT BRA negated_client_request KET 	%{ mNOT(%2); %}
	| DRW BRA POWER power_list KET 			%{ %3.unshift(TU.power(%2)); mDraw(%3); %}
	| send_message
;

%negated_client_request %{ Message %}
	: TME BRA INTEGER KET 				%{ mTimeToDeadline(TU.integer(%2)); %}
	| DRW 								%{ mDraw(null); %}
	| DRW BRA POWER power_list KET 		%{ %3.unshift(TU.power(%2)); mDraw(%3); %}
;

%negated_server_message %{ Message %}
	: TME BRA INTEGER KET 		%{ mTimeToDeadline(TU.integer(%2)); %}
	| CCD BRA POWER KET 		%{ mPowerDisorder(TU.power(%2)); %}
;

%rejectable_client_command %{ Message %}
	: HLO 					%{ mHello(null,null,null); %}
	| NOW 					%{ mCurrentLocation(null,null); %}
	| SCO 					%{ mSupplyOwnership(null); %}
	| HST BRA turn KET 		%{ mHistory(%2); %}
	| SUB order_list 		%{ mSubmit(null,%1); %}
	| ORD 					%{ mOrderResult(null,null,null); %}
	| TME 					%{ mTimeToDeadline(null); %}
	| ADM BRA TEXT KET BRA TEXT KET %{ mAdmin(TU.text(%2),TU.text(%5)); %}
;

%any_token_sequence %{ Array<Token> %}
	: any_no_bracket %{ [%0]; %}
	| BRA any_token_sequence KET %{ %1.unshift(%0); %1.push(%2); %1; %}
	| any_token_sequence any_no_bracket %{ %0.push(%1); %0; %}
	| any_token_sequence BRA any_token_sequence KET %{ %0.push(%1); %0 = %0.concat(%2); %0.push(%3); %0; %}
;

%any_no_bracket %{ Token %} : CHO | INTEGER | POWER | AMY | FLT | CTO | CVY | HLD | MTO | SUP | VIA | DSB | RTO | BLD | REM | WVE | MBV | BPR | CST | ESC | FAR | HSC | NAS | NMB | NMR | NRN | NRS | NSA | NSC | NSF | NSP | NSU | NVR | NYU | YSC | SUC | BNC | CUT | DSR | FLD | NSO | RET | NCS | NEC | ECS | SEC | SCS | SWC | WCS | NWC | SPR | SUM | FAL | AUT | WIN | CCD | DRW | FRM | GOF | HLO | HST | HUH | IAM | LOD | MAP | MDF | MIS | NME | NOT | NOW | OBS | OFF | ORD | OUT | PRN | REJ | SCO | SLO | SND | SUB | SVE | THX | TME | YES | ADM | AOA | BTL | ERR | LVL | MRT | MTL | NPB | NPR | PDA | PTL | RTL | UNO | DSD | ALY | AND | BWX | DMZ | ELS | EXP | FWD | FCT | FOR | HOW | IDK | IFF | INS | OCC | ORR | PCE | POB | PRP | QRY | SCD | SRY | SUG | THK | THN | TRY | VSS | WHT | WHY | XDO | XOY | YDO | CHO | BCC | UNT | TEXT | INLAND | SEA | COASTAL | BICOASTAL ;

%any %{ Token %} : any_no_bracket | BRA | KET ;

%bad_bracketed_sequence %{ Array<Token> %}
	: any %{ [%0]; %}
	| bad_bracketed_sequence any %{ %0.push(%1); %0; %}
;

%coast %{ Coast %}
	: NCS %{ TU.coast(%0); %} 
	| NEC %{ TU.coast(%0); %} 
	| ECS %{ TU.coast(%0); %} 
	| SEC %{ TU.coast(%0); %} 
	| SCS %{ TU.coast(%0); %} 
	| SWC %{ TU.coast(%0); %} 
	| WCS %{ TU.coast(%0); %} 
	| NWC %{ TU.coast(%0); %} 
;

%compound_order_result %{ CompOrderResult %}
	: order_note %{ { note:%0, result:null, ret:false }; %}
	| order_result %{ { note:null, result:%0, ret:false }; %}
	| order_note RET %{ { note:%0, result:null, ret:true }; %}
	| order_result RET %{ { note:null, result:%0, ret:true }; %}
;

%sco_entry %{ ScoEntry %}
	: POWER province_list %{ { power : TU.power(%0), locs : %1 }; %}
;

%sco_entry_list %{ Array<ScoEntry> %}
	: BRA sco_entry KET %{ [%1]; %}
	| sco_entry_list BRA sco_entry KET %{ %0.push(%2); %0; %}
;

%turn %{ Turn %}
	: phase INTEGER %{ { phase : %0, turn : TU.integer(%1) }; %} 
;

%phase %{ Phase %}
	: SPR %{ TU.phase(%0); %} 
	| SUM %{ TU.phase(%0); %} 
	| FAL %{ TU.phase(%0); %} 
	| AUT %{ TU.phase(%0); %} 
	| WIN %{ TU.phase(%0); %} 
;

%province %{ Province %}
	: INLAND %{ TU.province(%0); %}
	| SEA %{ TU.province(%0); %}
	| COASTAL %{ TU.province(%0); %}
	| BICOASTAL %{ TU.province(%0); %}
;

%power_list %{ Array<Int> %}
	: POWER %{ [TU.power(%0)]; %}
	| power_list POWER %{ %0.push(TU.power(%1)); %0; %}
;

%order %{ MsgOrder %}
	: BRA unit_with_location KET HLD %{ moHold(%1); %}
	| BRA unit_with_location KET DSB %{ moDisband(%1); %}
	| BRA unit_with_location KET BLD %{ moBuild(%1); %}
	| BRA unit_with_location KET REM %{ moRemove(%1); %}
	| BRA unit_with_location KET RTO mdf_province %{ moRetreat(%1,%4); %}
	| BRA unit_with_location KET MTO mdf_province %{ moMove(%1,%4); %}
	| BRA unit_with_location KET SUP BRA unit_with_location KET %{
		moSupport(%1,%5,null);
	%}
	| BRA unit_with_location KET SUP BRA unit_with_location KET MTO province %{
		moSupport(%1,%5,%8);
	%}
	| BRA unit_with_location KET CVY BRA unit_with_location KET CTO province %{
		moConvoy(%1,%5,%8);
	%}
	| BRA unit_with_location KET CTO province VIA BRA province_list KET %{
		moMoveByConvoy(%1,%4,%7);
	%}
;

%order_list %{ Array<MsgOrder> %}
	: BRA order KET %{ [%1]; %}
	| order_list BRA order KET %{ %0.push(%2); %0; %}
;

%order_note %{ OrderNote %} : sub_order_note %{ switch(cast(%0,Token)) { case tOrderNote(x): x; default : null; } %} ;
%sub_order_note %{ Token %} : MBV | FAR | NSP | NSU | NAS | NSF | NSA | NYU | NRN | NVR | YSC | ESC | HSC | NSC | CST | NMB | NMR | NRS ;

%order_result %{ Result %} : sub_order_result %{ switch(cast(%0,Token)) { case tResult(x): x; default : null; } %} ;
%sub_order_result %{ Token %} : SUC | BNC | CUT | DSR | NSO ;

%unit_with_location %{ UnitWithLoc %}
	: POWER unit_type mdf_province %{ { power : TU.power(%0), type : %1, location : %2 }; %}
;

%mdf_adjacencies %{ Array<MdfProAdjacencies> %}
	: BRA mdf_province_adjacencies KET %{ [%1]; %}
	| mdf_adjacencies BRA mdf_province_adjacencies KET %{ %0.push(%2); %0; %}
;

%mdf_province_adjacencies %{ MdfProAdjacencies %}
	: province mdf_coast_adjacencies_list %{ { pro : %0, coasts : %1 }; %}
;

%mdf_coast %{ Coast %}
	: FLT coast %{ %1; %}
;

%mdf_coast_adjacencies %{ MdfCoastAdjacencies %}
	: unit_type mdf_province_list %{ { unit : %0, locs : %1 }; %}
;

%mdf_coast_adjacencies_list %{ Array<MdfCoastAdjacencies> %}
	: BRA mdf_coast_adjacencies KET %{ [%1]; %}
	| mdf_coast_adjacencies_list BRA mdf_coast_adjacencies KET %{ %0.push(%2); %0; %}
;

%mdf_centre_list %{ MdfCentreList %}
	: POWER province_list %{ { powers: [TU.power(%0)], locs : %1 }; %}
	| UNO province_list   %{ { powers: [], locs : %1 }; %}
	| BRA power_list KET province_list %{ { powers: %1, locs : %3 }; %}
;

%mdf_centre_list_list %{ Array<MdfCentreList> %}
	: BRA mdf_centre_list KET %{ [%1]; %}
	| mdf_centre_list_list BRA mdf_centre_list KET %{ %0.push(%2); %0; %}
;

%mdf_supply_centres %{ Array<MdfCentreList> %}
	: BRA mdf_centre_list KET %{ [%1]; %}
	| mdf_centre_list_list BRA mdf_centre_list KET %{ %0.push(%2); %0; %}
;

%mdf_provinces %{ MdfProvinces %}
	: BRA mdf_supply_centres KET BRA province_list KET %{ {slocs: %1, locs : %4 }; %}
;

%mdf_province %{ Location %}
	: province %{ { province : %0, coast : null }; %}
	| BRA province_and_coast KET %{ %1; %}
;

%mdf_province_list %{ Array<Location> %}
	: mdf_province %{ [%0]; %}
	| mdf_province_list mdf_province %{ %0.push(%1); %0; %}
;

%negatable_command %{ Message %}
	: SUB BRA order KET %{ mSubmit(null,cast [%2]); %}
	| SUB %{ mSubmit(null,null); %}
	| GOF %{ mGoFlag; %}
	| DRW %{ mDraw(null); %}
	| DRW BRA POWER power_list KET %{ %3.unshift(TU.power(%2)); mDraw(%3); %}
	| TME %{ mTimeToDeadline(null); %}
	| TME BRA INTEGER KET %{ mTimeToDeadline(TU.integer(%2)); %}
;

%province_and_coast %{ Location %}
	: province coast %{ { province : %0, coast : %1 }; %}
;

%province_list %{ Array<Province> %}
	: province %{ [%0]; %}
	| province_list province %{ %0.push(%1); %0; %}
;

%unit_type %{ UnitType %}
	: AMY %{ TU.unitType(%0); %}
	| FLT %{ TU.unitType(%0); %}
;

%unit_with_location_and_mrt %{ UnitWithLocAndMRT %}
	: unit_with_location %{ { unitloc : %0, locs : null }; %}
	| unit_with_location MRT BRA mdf_province_list KET %{ { unitloc : %0, locs : %3 }; %}
;

%unit_with_location_list %{ Array<UnitWithLoc> %}
	: BRA unit_with_location KET %{ [%1]; %}
	| unit_with_location_list BRA unit_with_location KET %{ %0.push(%2); %0; %}
;

%unit_with_location_and_mrt_list %{ Array<UnitWithLocAndMRT> %}
	: BRA unit_with_location_and_mrt KET %{ [%1]; %}
	| unit_with_location_and_mrt_list BRA unit_with_location_and_mrt KET %{ %0.push(%2); %0; %}
;

%variant %{ Variant %}
	: BRA variant_option KET %{ [%1]; %}
	| variant BRA variant_option KET %{ %0.push(%2); %0; %}
;

%variant_option %{ VariantOption %}
	: LVL INTEGER %{ { par : TU.parameter(%0), val : TU.integer(%1) }; %}
	| MTL INTEGER %{ { par : TU.parameter(%0), val : TU.integer(%1) }; %}
	| RTL INTEGER %{ { par : TU.parameter(%0), val : TU.integer(%1) }; %}
	| BTL INTEGER %{ { par : TU.parameter(%0), val : TU.integer(%1) }; %}
	| AOA         %{ { par : TU.parameter(%0), val : null           }; %}
	| DSD         %{ { par : TU.parameter(%0), val : null           }; %}
	| PDA         %{ { par : TU.parameter(%0), val : null           }; %}
	| PTL INTEGER %{ { par : TU.parameter(%0), val : TU.integer(%1) }; %}
	| NPR         %{ { par : TU.parameter(%0), val : null           }; %}
	| NPB         %{ { par : TU.parameter(%0), val : null           }; %}
;

%try_token %{ Token %} : PRP | PCE | ALY | VSS | DRW | SLO | NOT | NAR | YES | REJ | BWX | CCL | XDO | DMZ | AND | ORR | SCD | OCC | INS | QRY | THK | FCT | IDK | SUG | WHT | HOW | EXP | SRY | FOR | IFF | THN | ELS | XOY | YDO | FRM | FWD | SND | WHY | POB;

%try_parameters %{ Array<Token> %}
	: %{ []; %}
	| try_parameters try_token %{ %0.push(%1); %0; %}
;

%explanation %{ Explanation %} : EXP BRA turn KET BRA reply KET %{ { turn : %2, reply : %5 }; %};

%future_offer %{ FutureOffer %} : PCE BRA POWER power_list KET %{ %3.unshift(TU.power(%2)); %3; %};

%period %{ Period %} : BRA turn KET BRA turn KET %{ { from : %1, to : %4 }; %};

%sc_ownership_list %{ ScOwnershipList %}
	: POWER province_list %{ { power : TU.power(%0), locs : %1 }; %}
	| UNO province_list   %{ { power : null, locs : %1 }; %}
;

%sc_ownership_list_list %{ Array<ScOwnershipList> %}
	: BRA sc_ownership_list KET %{ [%1]; %}
	| sc_ownership_list_list BRA sc_ownership_list KET %{ %0.push(%2); %0; %}
;

%arrangement %{ Arrangement %}
	: PCE BRA POWER power_list KET						%{ %3.unshift(TU.power(%2)); arPeace(%3); %}
	| ALY BRA power_list KET VSS BRA power_list KET		%{ arAlly(%2,%6); %}
	| DRW												%{ arDraw; %}
	| SLO BRA POWER KET									%{ arSolo(TU.power(%2)); %}
	| NOT BRA arrangement KET							%{ arNOT(%2); %}
	| NAR BRA arrangement KET							%{ arNAR(%2); %}
	| XDO BRA order KET									%{ arXDo(%2); %}
	| DMZ BRA power_list KET BRA province_list KET		%{ arDMZ(%2,%5); %}
	| SCD sc_ownership_list_list						%{ arSCD(%1); %} 
	| OCC unit_with_location_list						%{ arOCC(%1); %}
	| AND arrangement_list								%{ arAND(%1); %}
	| ORR arrangement_list								%{ arOR(%1); %}
	| CHO BRA INTEGER INTEGER KET arrangement_list		%{ arCHO(TU.integer(%2),TU.integer(%3),%5); %}
	| FOR BRA turn KET BRA future_offer KET				%{ arFOR(%2,null,%5); %}
	| FOR BRA period KET BRA future_offer KET			%{ arFOR(null,%2,%5); %}
	| XOY BRA POWER KET BRA POWER KET					%{ arXOY(TU.power(%2),TU.power(%5)); %}
	| YDO BRA POWER KET unit_with_location_list			%{ arYDO(TU.power(%2),%4); %}
	| SND BRA POWER KET BRA power_list KET BRA press_message KET %{ arSND(TU.power(%2),%5,%8,null); %}
	| SND BRA POWER KET BRA power_list KET BRA reply KET		 %{ arSND(TU.power(%2),%5,null,%8); %}
	| FWD BRA power_list KET BRA POWER KET BRA POWER KET %{ arFWD(%2,TU.power(%5),TU.power(%8)); %}
	| BCC BRA POWER KET BRA power_list KET BRA POWER KET %{ arBCC(TU.power(%2),%5,TU.power(%8)); %}
;

%arrangement_list %{ Array<Arrangement> %}
	: BRA arrangement KET %{ [%1]; %}
	| arrangement_list BRA arrangement KET %{ %0.push(%2); %0; %}
;

%press_message %{ PressMsg %}
	: PRP BRA arrangement KET     %{ pmPRP(%2,null); %}
	| TRY BRA try_parameters KET  %{ pmTRY(%2); %}
	| CCL BRA press_message KET   %{ pmCCL(%2); %}
	| PRP BRA logical_operator KET %{ pmPRP(null,%2); %}
	| INS BRA arrangement KET	%{ pmINS(%2); %}
	| QRY BRA arrangement KET	%{ pmQRY(%2); %}
	| SUG BRA arrangement KET	%{ pmSUG(%2); %}
	| THK BRA arrangement KET	%{ pmTHK(%2); %}
	| FCT BRA arrangement KET	%{ pmFCT(%2); %}
	| WHT BRA unit_with_location KET	%{ pmWHT(%2); %}
	| HOW BRA province KET	%{ pmHOW(%2,null); %}
	| HOW BRA POWER KET	%{ pmHOW(null,TU.power(%2)); %}
	| EXP BRA turn KET BRA reply KET	%{ pmEXP(%2,%5); %}
	| IFF BRA arrangement KET THN BRA press_message KET	%{ pmIFF(%2,%6,null); %}
	| IFF BRA arrangement KET THN BRA press_message KET ELS BRA press_message KET %{ pmIFF(%2,%6,%10); %}
	| FRM BRA POWER INTEGER KET BRA power_list KET BRA press_message KET	%{ pmFRM(TU.power(%2),TU.integer(%3),%6,%9,null); %}
	| FRM BRA POWER INTEGER KET BRA power_list KET BRA reply KET %{ pmFRM(TU.power(%2), TU.integer(%3), %6, null, %9); %}
	| TEXT %{ pmText(TU.text(%0)); %}
;

%query %{ Arrangement %} : QRY BRA arrangement KET %{ %2; %} ;

%negatable_query %{ NegQuery %}
	: QRY BRA arrangement KET %{ negQRY(%2); %}
	| NOT BRA query KET		  %{ negNOT(%2); %}
;

%logical_operator %{ LogicalOp %}
	: AND arrangement_list %{ { and:true, list:%1 }; %}
	| ORR arrangement_list %{ { and:false,list:%1 }; %}
;

%reply %{ ReplyMsg %}
	: YES BRA press_message KET %{ rmYes(%2,null); %}
	| YES BRA explanation KET	%{ rmYes(null,%2); %}
	| REJ BRA press_message KET	%{ rmRej(%2,null); %}
	| REJ BRA explanation KET	%{ rmRej(null,%2); %}
	| BWX BRA press_message KET	%{ rmBWX(%2); %}
	| HUH BRA any_token_sequence KET	%{ rmHUH(%2); %}
	| THK BRA negatable_query KET	%{ rmTHK(%2); %}
	| FCT BRA negatable_query KET	%{ rmFCT(%2); %}
	| SRY BRA explanation KET		%{ rmSRY(%2); %}
	| POB BRA why_sequence KET	%{ rmPOB(%2); %}
	| WHY BRA think_and_fact KET	%{ rmWHY(whyThinkFact(%2)); %}
	| WHY BRA SUG BRA arrangement KET KET %{ rmWHY(whySug(%4)); %}
	| WHY BRA PRP BRA arrangement KET KET %{ rmWHY(whyPRP(%4)); %}
	| WHY BRA INS BRA arrangement KET KET %{ rmWHY(whyINS(%4)); %}
	| IDK BRA query KET			%{ rmIDK(whyQry(%2)); %}
	| IDK BRA explanation KET	%{ rmIDK(whyExp(%2)); %}
	| IDK BRA PRP BRA arrangement KET KET	%{ rmIDK(whyPRP(%4)); %}
	| IDK BRA INS BRA arrangement KET KET	%{ rmIDK(whyINS(%4)); %}
	| IDK BRA SUG BRA arrangement KET KET	%{ rmIDK(whySug(%4)); %}
	| press_message		%{ rmPress(%0); %}
;

%send_message %{ Message %}
	: SND BRA power_list KET BRA press_message KET %{ mSend(null,%2,%5,null); %}
	| SND BRA power_list KET BRA reply KET		   %{ mSend(null,%2,null,%5); %}
	| SND BRA turn KET BRA power_list KET BRA press_message KET %{ mSend(%2,%5,%8,null); %}
	| SND BRA turn KET BRA power_list KET BRA reply KET			%{ mSend(%2,%5,null,%8); %}
;

%think_and_fact %{ ThinkAndFact %}
	: THK BRA arrangement KET %{ { thk:true, arr:%2 }; %}
	| FCT BRA arrangement KET %{ { thk:false,arr:%2 }; %}
;

%why_sequence %{ ThinkAndFact %} : WHY BRA think_and_fact KET %{ %2; %} ;
